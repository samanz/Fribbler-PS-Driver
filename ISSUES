---------- CURRENT ISSUES -----------------------------------------------------------------------------------------------------

	- None, and let's keep it that way!

---------- FIXED ISSUES -------------------------------------------------------------------------------------------------------

	- Bluetooth LATENCY! (I think)
		- Does player provide a feedback mechanism to alert the client when the commands have been sent and acknowledged?
			For example: You want to drive for 5 seconds, so you start a clock and send the drive command. However,
			if it takes 2 seconds for the command to reach the scribbler and then act on the command, that means that
			it will only drive for 3 seconds before it's sent the command to stop (which, again, might take time to reach it).
			WE NEED A WAY TO WORK AROUND THIS SOMEHOW! As it works now, I can't get it to do anything (driving in a square,
			for example) with any kind of certainty. What can we do about this?
		- After thinking about this some, and checking exactly what kind of feedback we get from position2d, the only solution
			is to have odometry implemented correctly.

	- Efficiency and Precision
		- Fribbler::Main(), that is the main control loop averages 0.45 seconds/frame, which is horrible.
			To give you an idea of how horrible this is, the scribbler can rotate at a rate of roughly
			2 rad/s, which is its slow rotational speed. At 2 rad/s, each time through the main control loop,
			the estimated displacement is about 0.9 radians. Now suppose you want to rotate pi/2, i.e. about
			1.57 radians. After two iterations of the control loop, we will have already driven 1.8 radians,
			overshooting our target. I can't imagine why the main control loop is taking so long to run, but
			I hope it's my code that's the cause for the inefficiency because if it's not then that would imply
			that it's the Player server itself. As it is now, this is far too imprecise to do anything with any
			kind of accuracy.
