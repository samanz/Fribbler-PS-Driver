20091118 - Mark:
	1. Fixed a bug in John's code:
	        Scribbler::drive() -left and right were reversed.

	2. Calibrated Scribbler #15
	        a. Going forward in a straight line:
	              avg function: right(left) = left - 14
20091113 - Mark:
	1. Added message processing for Position2D geometry.

	2. Started working on Position2D odometry.

20091111 - Mark:
	1. Fixed a bug in the driver that was not permitting it to handle messages
	   properly. Fribbler::ProcessMessage() first parameter must be QueuePointer&
	   and not MessagePointer* as I had written initially.

	2. Got the Player server to successfully process a message, specifically
	   PLAYER_POSITION2D_CMD_VEL, so we're able to get the Scribbler to drive
	   from within Player. The significance of this is that we basically set the
	   stage for handling all the other messages since we know that this works.

20091106 - Mark:
	1. Created a preliminary driver testing program (/src/test-fribbler.cpp);
	   It can be built with a "make test-fribbler", or simply "make all",
	   which will make all targets.

	2. Added preliminary message processing code.

20091104 - Mark:
	1. Interesting tidbit that wasted some of my time:
	   You must provide (Add) at LEAST one interface in the driver's constructor
	   for the driver to be loaded properly. If no interfaces are provided,
	   the thread management methods, namely MainSetup() and subsequently Main(),
	   will never get called. Don't make the same mistake I did!

	2. Added a macro (FRIBBLER_DEBUG) in /include/Fribbler.h
	   Defining it as 1 (nonzero) enables debugging messages (obviously).

20091030 - Sam:

	1. Created square.cpp in src that will drive the scribbler simple as a square.

	2. Fixed error in scribbler.cpp with problem of not knowing if echo is set before echo set command is sent

	3. Created todo list

20091030 - Mark:
	1. I separated the Scribbler-specific components from the Player-specific components.

	2. I edited the Makefile to be more modular in order to take into account the new
	   directory tree hierarchy.

	3. It is now possible to build a pluggable Player driver by using the default make
	   target, i.e. "make". To build the Scribbler stand-alone driver that John created
	   as a linkable library file, use the libscribbler target, i.e. "make libscribbler".

	4. Added initialization code to the Player driver (for Scribbler).

	5. Created a basic Player configuration file for our driver.

20091023 - Mark:

	1. I removed my serial class from the src tree and placed it into a
	   separate folder labeled "Mark" in the top-level directory.

	2. I added some of John's code into the src tree. I believe that this
	   is the bare minimum that we need from John's code in order to start
	   working on the Player driver.

	3. I also wrote up a Makefile with a default "test" target that compiles John's
	   library in addition to temp.cpp, which is basically just a testing driver that
	   I'm using to test John's code.

	4. There's some quirky behavior in John's code. When you create a Scribbler object
	   for the first time, i.e. after starting up the Scribbler, you get some data
	   errors. It seems to work fine after that though. In the Scribbler constructor,
	   after the call to setEchoMode(), Scribbler::getFinalAck() gets called where
	   the data errors occur. At first it would block indefinitely until I lowered the
	   max tries in getCharBlocking() from 1000000 to 10. I couldn't figure out how to
	   fix it, but maybe you'll have better luck with it.

	5. I started this Changelog which is pretty cumbersome to edit, but it's better
	   than nothing. If you have any better ideas then let me know.
